//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PasswordReset = newPasswordResetTable("public", "password_reset", "")

type passwordResetTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	Code      postgres.ColumnString
	UserID    postgres.ColumnInteger
	CreatedAt postgres.ColumnTimestampz
	Tries     postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PasswordResetTable struct {
	passwordResetTable

	EXCLUDED passwordResetTable
}

// AS creates new PasswordResetTable with assigned alias
func (a PasswordResetTable) AS(alias string) *PasswordResetTable {
	return newPasswordResetTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PasswordResetTable with assigned schema name
func (a PasswordResetTable) FromSchema(schemaName string) *PasswordResetTable {
	return newPasswordResetTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PasswordResetTable with assigned table prefix
func (a PasswordResetTable) WithPrefix(prefix string) *PasswordResetTable {
	return newPasswordResetTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PasswordResetTable with assigned table suffix
func (a PasswordResetTable) WithSuffix(suffix string) *PasswordResetTable {
	return newPasswordResetTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPasswordResetTable(schemaName, tableName, alias string) *PasswordResetTable {
	return &PasswordResetTable{
		passwordResetTable: newPasswordResetTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newPasswordResetTableImpl("", "excluded", ""),
	}
}

func newPasswordResetTableImpl(schemaName, tableName, alias string) passwordResetTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		CodeColumn      = postgres.StringColumn("code")
		UserIDColumn    = postgres.IntegerColumn("user_id")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		TriesColumn     = postgres.IntegerColumn("tries")
		allColumns      = postgres.ColumnList{IDColumn, CodeColumn, UserIDColumn, CreatedAtColumn, TriesColumn}
		mutableColumns  = postgres.ColumnList{CodeColumn, UserIDColumn, CreatedAtColumn, TriesColumn}
	)

	return passwordResetTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Code:      CodeColumn,
		UserID:    UserIDColumn,
		CreatedAt: CreatedAtColumn,
		Tries:     TriesColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

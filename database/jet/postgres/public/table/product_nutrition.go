//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ProductNutrition = newProductNutritionTable("public", "product_nutrition", "")

type productNutritionTable struct {
	postgres.Table

	// Columns
	ID                     postgres.ColumnInteger
	ProductID              postgres.ColumnInteger
	IngredientText         postgres.ColumnString
	IngredientList         postgres.ColumnString
	Nutriments             postgres.ColumnString
	ServingSize            postgres.ColumnString
	ServingSizeValue       postgres.ColumnFloat
	ServingSizeUnit        postgres.ColumnString
	OpenfoodfactsUpdatedAt postgres.ColumnTimestamp
	Vegan                  postgres.ColumnBool
	Vegetarian             postgres.ColumnBool
	GlutenFree             postgres.ColumnBool
	LactoseFree            postgres.ColumnBool
	Halal                  postgres.ColumnBool
	Kosher                 postgres.ColumnBool
	CreatedAt              postgres.ColumnTimestamp
	UpdatedAt              postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ProductNutritionTable struct {
	productNutritionTable

	EXCLUDED productNutritionTable
}

// AS creates new ProductNutritionTable with assigned alias
func (a ProductNutritionTable) AS(alias string) *ProductNutritionTable {
	return newProductNutritionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ProductNutritionTable with assigned schema name
func (a ProductNutritionTable) FromSchema(schemaName string) *ProductNutritionTable {
	return newProductNutritionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ProductNutritionTable with assigned table prefix
func (a ProductNutritionTable) WithPrefix(prefix string) *ProductNutritionTable {
	return newProductNutritionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ProductNutritionTable with assigned table suffix
func (a ProductNutritionTable) WithSuffix(suffix string) *ProductNutritionTable {
	return newProductNutritionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newProductNutritionTable(schemaName, tableName, alias string) *ProductNutritionTable {
	return &ProductNutritionTable{
		productNutritionTable: newProductNutritionTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newProductNutritionTableImpl("", "excluded", ""),
	}
}

func newProductNutritionTableImpl(schemaName, tableName, alias string) productNutritionTable {
	var (
		IDColumn                     = postgres.IntegerColumn("id")
		ProductIDColumn              = postgres.IntegerColumn("product_id")
		IngredientTextColumn         = postgres.StringColumn("ingredient_text")
		IngredientListColumn         = postgres.StringColumn("ingredient_list")
		NutrimentsColumn             = postgres.StringColumn("nutriments")
		ServingSizeColumn            = postgres.StringColumn("serving_size")
		ServingSizeValueColumn       = postgres.FloatColumn("serving_size_value")
		ServingSizeUnitColumn        = postgres.StringColumn("serving_size_unit")
		OpenfoodfactsUpdatedAtColumn = postgres.TimestampColumn("openfoodfacts_updated_at")
		VeganColumn                  = postgres.BoolColumn("vegan")
		VegetarianColumn             = postgres.BoolColumn("vegetarian")
		GlutenFreeColumn             = postgres.BoolColumn("gluten_free")
		LactoseFreeColumn            = postgres.BoolColumn("lactose_free")
		HalalColumn                  = postgres.BoolColumn("halal")
		KosherColumn                 = postgres.BoolColumn("kosher")
		CreatedAtColumn              = postgres.TimestampColumn("created_at")
		UpdatedAtColumn              = postgres.TimestampColumn("updated_at")
		allColumns                   = postgres.ColumnList{IDColumn, ProductIDColumn, IngredientTextColumn, IngredientListColumn, NutrimentsColumn, ServingSizeColumn, ServingSizeValueColumn, ServingSizeUnitColumn, OpenfoodfactsUpdatedAtColumn, VeganColumn, VegetarianColumn, GlutenFreeColumn, LactoseFreeColumn, HalalColumn, KosherColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns               = postgres.ColumnList{ProductIDColumn, IngredientTextColumn, IngredientListColumn, NutrimentsColumn, ServingSizeColumn, ServingSizeValueColumn, ServingSizeUnitColumn, OpenfoodfactsUpdatedAtColumn, VeganColumn, VegetarianColumn, GlutenFreeColumn, LactoseFreeColumn, HalalColumn, KosherColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return productNutritionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                     IDColumn,
		ProductID:              ProductIDColumn,
		IngredientText:         IngredientTextColumn,
		IngredientList:         IngredientListColumn,
		Nutriments:             NutrimentsColumn,
		ServingSize:            ServingSizeColumn,
		ServingSizeValue:       ServingSizeValueColumn,
		ServingSizeUnit:        ServingSizeUnitColumn,
		OpenfoodfactsUpdatedAt: OpenfoodfactsUpdatedAtColumn,
		Vegan:                  VeganColumn,
		Vegetarian:             VegetarianColumn,
		GlutenFree:             GlutenFreeColumn,
		LactoseFree:            LactoseFreeColumn,
		Halal:                  HalalColumn,
		Kosher:                 KosherColumn,
		CreatedAt:              CreatedAtColumn,
		UpdatedAt:              UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AppVersionRequirement = newAppVersionRequirementTable("public", "app_version_requirement", "")

type appVersionRequirementTable struct {
	postgres.Table

	// Columns
	Platform   postgres.ColumnString
	MinVersion postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AppVersionRequirementTable struct {
	appVersionRequirementTable

	EXCLUDED appVersionRequirementTable
}

// AS creates new AppVersionRequirementTable with assigned alias
func (a AppVersionRequirementTable) AS(alias string) *AppVersionRequirementTable {
	return newAppVersionRequirementTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AppVersionRequirementTable with assigned schema name
func (a AppVersionRequirementTable) FromSchema(schemaName string) *AppVersionRequirementTable {
	return newAppVersionRequirementTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AppVersionRequirementTable with assigned table prefix
func (a AppVersionRequirementTable) WithPrefix(prefix string) *AppVersionRequirementTable {
	return newAppVersionRequirementTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AppVersionRequirementTable with assigned table suffix
func (a AppVersionRequirementTable) WithSuffix(suffix string) *AppVersionRequirementTable {
	return newAppVersionRequirementTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAppVersionRequirementTable(schemaName, tableName, alias string) *AppVersionRequirementTable {
	return &AppVersionRequirementTable{
		appVersionRequirementTable: newAppVersionRequirementTableImpl(schemaName, tableName, alias),
		EXCLUDED:                   newAppVersionRequirementTableImpl("", "excluded", ""),
	}
}

func newAppVersionRequirementTableImpl(schemaName, tableName, alias string) appVersionRequirementTable {
	var (
		PlatformColumn   = postgres.StringColumn("platform")
		MinVersionColumn = postgres.StringColumn("min_version")
		allColumns       = postgres.ColumnList{PlatformColumn, MinVersionColumn}
		mutableColumns   = postgres.ColumnList{MinVersionColumn}
	)

	return appVersionRequirementTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Platform:   PlatformColumn,
		MinVersion: MinVersionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

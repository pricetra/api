//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var BranchList = newBranchListTable("public", "branch_list", "")

type branchListTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	UserID    postgres.ColumnInteger
	ListID    postgres.ColumnInteger
	BranchID  postgres.ColumnInteger
	CreatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type BranchListTable struct {
	branchListTable

	EXCLUDED branchListTable
}

// AS creates new BranchListTable with assigned alias
func (a BranchListTable) AS(alias string) *BranchListTable {
	return newBranchListTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BranchListTable with assigned schema name
func (a BranchListTable) FromSchema(schemaName string) *BranchListTable {
	return newBranchListTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BranchListTable with assigned table prefix
func (a BranchListTable) WithPrefix(prefix string) *BranchListTable {
	return newBranchListTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BranchListTable with assigned table suffix
func (a BranchListTable) WithSuffix(suffix string) *BranchListTable {
	return newBranchListTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBranchListTable(schemaName, tableName, alias string) *BranchListTable {
	return &BranchListTable{
		branchListTable: newBranchListTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newBranchListTableImpl("", "excluded", ""),
	}
}

func newBranchListTableImpl(schemaName, tableName, alias string) branchListTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		UserIDColumn    = postgres.IntegerColumn("user_id")
		ListIDColumn    = postgres.IntegerColumn("list_id")
		BranchIDColumn  = postgres.IntegerColumn("branch_id")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		allColumns      = postgres.ColumnList{IDColumn, UserIDColumn, ListIDColumn, BranchIDColumn, CreatedAtColumn}
		mutableColumns  = postgres.ColumnList{UserIDColumn, ListIDColumn, BranchIDColumn, CreatedAtColumn}
	)

	return branchListTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		UserID:    UserIDColumn,
		ListID:    ListIDColumn,
		BranchID:  BranchIDColumn,
		CreatedAt: CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

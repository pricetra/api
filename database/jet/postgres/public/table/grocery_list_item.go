//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var GroceryListItem = newGroceryListItemTable("public", "grocery_list_item", "")

type groceryListItemTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnInteger
	GroceryListID postgres.ColumnInteger
	UserID        postgres.ColumnInteger
	ProductID     postgres.ColumnInteger
	Quantity      postgres.ColumnInteger
	Unit          postgres.ColumnString
	Category      postgres.ColumnString
	Weight        postgres.ColumnString
	Completed     postgres.ColumnBool
	CreatedAt     postgres.ColumnTimestampz
	UpdatedAt     postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type GroceryListItemTable struct {
	groceryListItemTable

	EXCLUDED groceryListItemTable
}

// AS creates new GroceryListItemTable with assigned alias
func (a GroceryListItemTable) AS(alias string) *GroceryListItemTable {
	return newGroceryListItemTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new GroceryListItemTable with assigned schema name
func (a GroceryListItemTable) FromSchema(schemaName string) *GroceryListItemTable {
	return newGroceryListItemTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new GroceryListItemTable with assigned table prefix
func (a GroceryListItemTable) WithPrefix(prefix string) *GroceryListItemTable {
	return newGroceryListItemTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new GroceryListItemTable with assigned table suffix
func (a GroceryListItemTable) WithSuffix(suffix string) *GroceryListItemTable {
	return newGroceryListItemTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newGroceryListItemTable(schemaName, tableName, alias string) *GroceryListItemTable {
	return &GroceryListItemTable{
		groceryListItemTable: newGroceryListItemTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newGroceryListItemTableImpl("", "excluded", ""),
	}
}

func newGroceryListItemTableImpl(schemaName, tableName, alias string) groceryListItemTable {
	var (
		IDColumn            = postgres.IntegerColumn("id")
		GroceryListIDColumn = postgres.IntegerColumn("grocery_list_id")
		UserIDColumn        = postgres.IntegerColumn("user_id")
		ProductIDColumn     = postgres.IntegerColumn("product_id")
		QuantityColumn      = postgres.IntegerColumn("quantity")
		UnitColumn          = postgres.StringColumn("unit")
		CategoryColumn      = postgres.StringColumn("category")
		WeightColumn        = postgres.StringColumn("weight")
		CompletedColumn     = postgres.BoolColumn("completed")
		CreatedAtColumn     = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn     = postgres.TimestampzColumn("updated_at")
		allColumns          = postgres.ColumnList{IDColumn, GroceryListIDColumn, UserIDColumn, ProductIDColumn, QuantityColumn, UnitColumn, CategoryColumn, WeightColumn, CompletedColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns      = postgres.ColumnList{GroceryListIDColumn, UserIDColumn, ProductIDColumn, QuantityColumn, UnitColumn, CategoryColumn, WeightColumn, CompletedColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return groceryListItemTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		GroceryListID: GroceryListIDColumn,
		UserID:        UserIDColumn,
		ProductID:     ProductIDColumn,
		Quantity:      QuantityColumn,
		Unit:          UnitColumn,
		Category:      CategoryColumn,
		Weight:        WeightColumn,
		Completed:     CompletedColumn,
		CreatedAt:     CreatedAtColumn,
		UpdatedAt:     UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

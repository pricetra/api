//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var GroceryList = newGroceryListTable("public", "grocery_list", "")

type groceryListTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	UserID    postgres.ColumnInteger
	Default   postgres.ColumnBool
	Name      postgres.ColumnString
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type GroceryListTable struct {
	groceryListTable

	EXCLUDED groceryListTable
}

// AS creates new GroceryListTable with assigned alias
func (a GroceryListTable) AS(alias string) *GroceryListTable {
	return newGroceryListTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new GroceryListTable with assigned schema name
func (a GroceryListTable) FromSchema(schemaName string) *GroceryListTable {
	return newGroceryListTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new GroceryListTable with assigned table prefix
func (a GroceryListTable) WithPrefix(prefix string) *GroceryListTable {
	return newGroceryListTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new GroceryListTable with assigned table suffix
func (a GroceryListTable) WithSuffix(suffix string) *GroceryListTable {
	return newGroceryListTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newGroceryListTable(schemaName, tableName, alias string) *GroceryListTable {
	return &GroceryListTable{
		groceryListTable: newGroceryListTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newGroceryListTableImpl("", "excluded", ""),
	}
}

func newGroceryListTableImpl(schemaName, tableName, alias string) groceryListTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		UserIDColumn    = postgres.IntegerColumn("user_id")
		DefaultColumn   = postgres.BoolColumn("default")
		NameColumn      = postgres.StringColumn("name")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		allColumns      = postgres.ColumnList{IDColumn, UserIDColumn, DefaultColumn, NameColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = postgres.ColumnList{UserIDColumn, DefaultColumn, NameColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return groceryListTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		UserID:    UserIDColumn,
		Default:   DefaultColumn,
		Name:      NameColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

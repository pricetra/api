//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ProductView = newProductViewTable("public", "product_view", "")

type productViewTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	ProductID postgres.ColumnInteger
	StockID   postgres.ColumnInteger
	UserID    postgres.ColumnInteger
	Origin    postgres.ColumnString
	Platform  postgres.ColumnString
	CreatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ProductViewTable struct {
	productViewTable

	EXCLUDED productViewTable
}

// AS creates new ProductViewTable with assigned alias
func (a ProductViewTable) AS(alias string) *ProductViewTable {
	return newProductViewTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ProductViewTable with assigned schema name
func (a ProductViewTable) FromSchema(schemaName string) *ProductViewTable {
	return newProductViewTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ProductViewTable with assigned table prefix
func (a ProductViewTable) WithPrefix(prefix string) *ProductViewTable {
	return newProductViewTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ProductViewTable with assigned table suffix
func (a ProductViewTable) WithSuffix(suffix string) *ProductViewTable {
	return newProductViewTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newProductViewTable(schemaName, tableName, alias string) *ProductViewTable {
	return &ProductViewTable{
		productViewTable: newProductViewTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newProductViewTableImpl("", "excluded", ""),
	}
}

func newProductViewTableImpl(schemaName, tableName, alias string) productViewTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		ProductIDColumn = postgres.IntegerColumn("product_id")
		StockIDColumn   = postgres.IntegerColumn("stock_id")
		UserIDColumn    = postgres.IntegerColumn("user_id")
		OriginColumn    = postgres.StringColumn("origin")
		PlatformColumn  = postgres.StringColumn("platform")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		allColumns      = postgres.ColumnList{IDColumn, ProductIDColumn, StockIDColumn, UserIDColumn, OriginColumn, PlatformColumn, CreatedAtColumn}
		mutableColumns  = postgres.ColumnList{ProductIDColumn, StockIDColumn, UserIDColumn, OriginColumn, PlatformColumn, CreatedAtColumn}
	)

	return productViewTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		ProductID: ProductIDColumn,
		StockID:   StockIDColumn,
		UserID:    UserIDColumn,
		Origin:    OriginColumn,
		Platform:  PlatformColumn,
		CreatedAt: CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var GroceryListResult = newGroceryListResultTable("public", "grocery_list_result", "")

type groceryListResultTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnInteger
	GroceryListID postgres.ColumnInteger
	UserID        postgres.ColumnInteger
	BranchID      postgres.ColumnInteger
	StoreID       postgres.ColumnInteger
	TotalPrice    postgres.ColumnFloat
	CurrencyCode  postgres.ColumnString
	ProductIds    postgres.ColumnString
	CreatedAt     postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type GroceryListResultTable struct {
	groceryListResultTable

	EXCLUDED groceryListResultTable
}

// AS creates new GroceryListResultTable with assigned alias
func (a GroceryListResultTable) AS(alias string) *GroceryListResultTable {
	return newGroceryListResultTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new GroceryListResultTable with assigned schema name
func (a GroceryListResultTable) FromSchema(schemaName string) *GroceryListResultTable {
	return newGroceryListResultTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new GroceryListResultTable with assigned table prefix
func (a GroceryListResultTable) WithPrefix(prefix string) *GroceryListResultTable {
	return newGroceryListResultTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new GroceryListResultTable with assigned table suffix
func (a GroceryListResultTable) WithSuffix(suffix string) *GroceryListResultTable {
	return newGroceryListResultTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newGroceryListResultTable(schemaName, tableName, alias string) *GroceryListResultTable {
	return &GroceryListResultTable{
		groceryListResultTable: newGroceryListResultTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newGroceryListResultTableImpl("", "excluded", ""),
	}
}

func newGroceryListResultTableImpl(schemaName, tableName, alias string) groceryListResultTable {
	var (
		IDColumn            = postgres.IntegerColumn("id")
		GroceryListIDColumn = postgres.IntegerColumn("grocery_list_id")
		UserIDColumn        = postgres.IntegerColumn("user_id")
		BranchIDColumn      = postgres.IntegerColumn("branch_id")
		StoreIDColumn       = postgres.IntegerColumn("store_id")
		TotalPriceColumn    = postgres.FloatColumn("total_price")
		CurrencyCodeColumn  = postgres.StringColumn("currency_code")
		ProductIdsColumn    = postgres.StringColumn("product_ids")
		CreatedAtColumn     = postgres.TimestampzColumn("created_at")
		allColumns          = postgres.ColumnList{IDColumn, GroceryListIDColumn, UserIDColumn, BranchIDColumn, StoreIDColumn, TotalPriceColumn, CurrencyCodeColumn, ProductIdsColumn, CreatedAtColumn}
		mutableColumns      = postgres.ColumnList{GroceryListIDColumn, UserIDColumn, BranchIDColumn, StoreIDColumn, TotalPriceColumn, CurrencyCodeColumn, ProductIdsColumn, CreatedAtColumn}
	)

	return groceryListResultTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		GroceryListID: GroceryListIDColumn,
		UserID:        UserIDColumn,
		BranchID:      BranchIDColumn,
		StoreID:       StoreIDColumn,
		TotalPrice:    TotalPriceColumn,
		CurrencyCode:  CurrencyCodeColumn,
		ProductIds:    ProductIdsColumn,
		CreatedAt:     CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

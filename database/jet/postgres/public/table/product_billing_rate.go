//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ProductBillingRate = newProductBillingRateTable("public", "product_billing_rate", "")

type productBillingRateTable struct {
	postgres.Table

	// Columns
	Type         postgres.ColumnString
	Rate         postgres.ColumnFloat
	CurrencyCode postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ProductBillingRateTable struct {
	productBillingRateTable

	EXCLUDED productBillingRateTable
}

// AS creates new ProductBillingRateTable with assigned alias
func (a ProductBillingRateTable) AS(alias string) *ProductBillingRateTable {
	return newProductBillingRateTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ProductBillingRateTable with assigned schema name
func (a ProductBillingRateTable) FromSchema(schemaName string) *ProductBillingRateTable {
	return newProductBillingRateTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ProductBillingRateTable with assigned table prefix
func (a ProductBillingRateTable) WithPrefix(prefix string) *ProductBillingRateTable {
	return newProductBillingRateTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ProductBillingRateTable with assigned table suffix
func (a ProductBillingRateTable) WithSuffix(suffix string) *ProductBillingRateTable {
	return newProductBillingRateTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newProductBillingRateTable(schemaName, tableName, alias string) *ProductBillingRateTable {
	return &ProductBillingRateTable{
		productBillingRateTable: newProductBillingRateTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newProductBillingRateTableImpl("", "excluded", ""),
	}
}

func newProductBillingRateTableImpl(schemaName, tableName, alias string) productBillingRateTable {
	var (
		TypeColumn         = postgres.StringColumn("type")
		RateColumn         = postgres.FloatColumn("rate")
		CurrencyCodeColumn = postgres.StringColumn("currency_code")
		allColumns         = postgres.ColumnList{TypeColumn, RateColumn, CurrencyCodeColumn}
		mutableColumns     = postgres.ColumnList{RateColumn, CurrencyCodeColumn}
	)

	return productBillingRateTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Type:         TypeColumn,
		Rate:         RateColumn,
		CurrencyCode: CurrencyCodeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

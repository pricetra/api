//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var List = newListTable("public", "list", "")

type listTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	Name      postgres.ColumnString
	Type      postgres.ColumnString
	UserID    postgres.ColumnInteger
	CreatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ListTable struct {
	listTable

	EXCLUDED listTable
}

// AS creates new ListTable with assigned alias
func (a ListTable) AS(alias string) *ListTable {
	return newListTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ListTable with assigned schema name
func (a ListTable) FromSchema(schemaName string) *ListTable {
	return newListTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ListTable with assigned table prefix
func (a ListTable) WithPrefix(prefix string) *ListTable {
	return newListTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ListTable with assigned table suffix
func (a ListTable) WithSuffix(suffix string) *ListTable {
	return newListTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newListTable(schemaName, tableName, alias string) *ListTable {
	return &ListTable{
		listTable: newListTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newListTableImpl("", "excluded", ""),
	}
}

func newListTableImpl(schemaName, tableName, alias string) listTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		NameColumn      = postgres.StringColumn("name")
		TypeColumn      = postgres.StringColumn("type")
		UserIDColumn    = postgres.IntegerColumn("user_id")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		allColumns      = postgres.ColumnList{IDColumn, NameColumn, TypeColumn, UserIDColumn, CreatedAtColumn}
		mutableColumns  = postgres.ColumnList{NameColumn, TypeColumn, UserIDColumn, CreatedAtColumn}
	)

	return listTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Name:      NameColumn,
		Type:      TypeColumn,
		UserID:    UserIDColumn,
		CreatedAt: CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

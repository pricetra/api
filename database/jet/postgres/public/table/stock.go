//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Stock = newStockTable("public", "stock", "")

type stockTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	ProductID   postgres.ColumnInteger
	CompanyID   postgres.ColumnInteger
	BranchID    postgres.ColumnInteger
	CreatedByID postgres.ColumnInteger
	UpdatedByID postgres.ColumnInteger
	CreatedAt   postgres.ColumnTimestampz
	UpdatedAt   postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type StockTable struct {
	stockTable

	EXCLUDED stockTable
}

// AS creates new StockTable with assigned alias
func (a StockTable) AS(alias string) *StockTable {
	return newStockTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new StockTable with assigned schema name
func (a StockTable) FromSchema(schemaName string) *StockTable {
	return newStockTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new StockTable with assigned table prefix
func (a StockTable) WithPrefix(prefix string) *StockTable {
	return newStockTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new StockTable with assigned table suffix
func (a StockTable) WithSuffix(suffix string) *StockTable {
	return newStockTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newStockTable(schemaName, tableName, alias string) *StockTable {
	return &StockTable{
		stockTable: newStockTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newStockTableImpl("", "excluded", ""),
	}
}

func newStockTableImpl(schemaName, tableName, alias string) stockTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		ProductIDColumn   = postgres.IntegerColumn("product_id")
		CompanyIDColumn   = postgres.IntegerColumn("company_id")
		BranchIDColumn    = postgres.IntegerColumn("branch_id")
		CreatedByIDColumn = postgres.IntegerColumn("created_by_id")
		UpdatedByIDColumn = postgres.IntegerColumn("updated_by_id")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampzColumn("updated_at")
		allColumns        = postgres.ColumnList{IDColumn, ProductIDColumn, CompanyIDColumn, BranchIDColumn, CreatedByIDColumn, UpdatedByIDColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns    = postgres.ColumnList{ProductIDColumn, CompanyIDColumn, BranchIDColumn, CreatedByIDColumn, UpdatedByIDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return stockTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		ProductID:   ProductIDColumn,
		CompanyID:   CompanyIDColumn,
		BranchID:    BranchIDColumn,
		CreatedByID: CreatedByIDColumn,
		UpdatedByID: UpdatedByIDColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

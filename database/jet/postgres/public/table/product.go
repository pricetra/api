//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Product = newProductTable("public", "product", "")

type productTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	Name        postgres.ColumnString
	Image       postgres.ColumnString
	Description postgres.ColumnString
	URL         postgres.ColumnString
	Brand       postgres.ColumnString
	Code        postgres.ColumnString
	CreatedByID postgres.ColumnInteger
	UpdatedByID postgres.ColumnInteger
	CreatedAt   postgres.ColumnTimestampz
	UpdatedAt   postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ProductTable struct {
	productTable

	EXCLUDED productTable
}

// AS creates new ProductTable with assigned alias
func (a ProductTable) AS(alias string) *ProductTable {
	return newProductTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ProductTable with assigned schema name
func (a ProductTable) FromSchema(schemaName string) *ProductTable {
	return newProductTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ProductTable with assigned table prefix
func (a ProductTable) WithPrefix(prefix string) *ProductTable {
	return newProductTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ProductTable with assigned table suffix
func (a ProductTable) WithSuffix(suffix string) *ProductTable {
	return newProductTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newProductTable(schemaName, tableName, alias string) *ProductTable {
	return &ProductTable{
		productTable: newProductTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newProductTableImpl("", "excluded", ""),
	}
}

func newProductTableImpl(schemaName, tableName, alias string) productTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		NameColumn        = postgres.StringColumn("name")
		ImageColumn       = postgres.StringColumn("image")
		DescriptionColumn = postgres.StringColumn("description")
		URLColumn         = postgres.StringColumn("url")
		BrandColumn       = postgres.StringColumn("brand")
		CodeColumn        = postgres.StringColumn("code")
		CreatedByIDColumn = postgres.IntegerColumn("created_by_id")
		UpdatedByIDColumn = postgres.IntegerColumn("updated_by_id")
		CreatedAtColumn   = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampzColumn("updated_at")
		allColumns        = postgres.ColumnList{IDColumn, NameColumn, ImageColumn, DescriptionColumn, URLColumn, BrandColumn, CodeColumn, CreatedByIDColumn, UpdatedByIDColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns    = postgres.ColumnList{NameColumn, ImageColumn, DescriptionColumn, URLColumn, BrandColumn, CodeColumn, CreatedByIDColumn, UpdatedByIDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return productTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Name:        NameColumn,
		Image:       ImageColumn,
		Description: DescriptionColumn,
		URL:         URLColumn,
		Brand:       BrandColumn,
		Code:        CodeColumn,
		CreatedByID: CreatedByIDColumn,
		UpdatedByID: UpdatedByIDColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

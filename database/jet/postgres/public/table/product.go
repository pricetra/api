//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Product = newProductTable("public", "product", "")

type productTable struct {
	postgres.Table

	// Columns
	ID                   postgres.ColumnInteger
	Name                 postgres.ColumnString
	Image                postgres.ColumnString
	Description          postgres.ColumnString
	URL                  postgres.ColumnString
	Brand                postgres.ColumnString
	Code                 postgres.ColumnString
	Color                postgres.ColumnString
	Model                postgres.ColumnString
	Category             postgres.ColumnString
	Weight               postgres.ColumnString
	LowestRecordedPrice  postgres.ColumnFloat
	HighestRecordedPrice postgres.ColumnFloat
	CreatedByID          postgres.ColumnInteger
	UpdatedByID          postgres.ColumnInteger
	CreatedAt            postgres.ColumnTimestampz
	UpdatedAt            postgres.ColumnTimestampz
	Source               postgres.ColumnString
	SearchVector         postgres.ColumnString
	CategoryID           postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ProductTable struct {
	productTable

	EXCLUDED productTable
}

// AS creates new ProductTable with assigned alias
func (a ProductTable) AS(alias string) *ProductTable {
	return newProductTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ProductTable with assigned schema name
func (a ProductTable) FromSchema(schemaName string) *ProductTable {
	return newProductTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ProductTable with assigned table prefix
func (a ProductTable) WithPrefix(prefix string) *ProductTable {
	return newProductTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ProductTable with assigned table suffix
func (a ProductTable) WithSuffix(suffix string) *ProductTable {
	return newProductTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newProductTable(schemaName, tableName, alias string) *ProductTable {
	return &ProductTable{
		productTable: newProductTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newProductTableImpl("", "excluded", ""),
	}
}

func newProductTableImpl(schemaName, tableName, alias string) productTable {
	var (
		IDColumn                   = postgres.IntegerColumn("id")
		NameColumn                 = postgres.StringColumn("name")
		ImageColumn                = postgres.StringColumn("image")
		DescriptionColumn          = postgres.StringColumn("description")
		URLColumn                  = postgres.StringColumn("url")
		BrandColumn                = postgres.StringColumn("brand")
		CodeColumn                 = postgres.StringColumn("code")
		ColorColumn                = postgres.StringColumn("color")
		ModelColumn                = postgres.StringColumn("model")
		CategoryColumn             = postgres.StringColumn("category")
		WeightColumn               = postgres.StringColumn("weight")
		LowestRecordedPriceColumn  = postgres.FloatColumn("lowest_recorded_price")
		HighestRecordedPriceColumn = postgres.FloatColumn("highest_recorded_price")
		CreatedByIDColumn          = postgres.IntegerColumn("created_by_id")
		UpdatedByIDColumn          = postgres.IntegerColumn("updated_by_id")
		CreatedAtColumn            = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn            = postgres.TimestampzColumn("updated_at")
		SourceColumn               = postgres.StringColumn("source")
		SearchVectorColumn         = postgres.StringColumn("search_vector")
		CategoryIDColumn           = postgres.IntegerColumn("category_id")
		allColumns                 = postgres.ColumnList{IDColumn, NameColumn, ImageColumn, DescriptionColumn, URLColumn, BrandColumn, CodeColumn, ColorColumn, ModelColumn, CategoryColumn, WeightColumn, LowestRecordedPriceColumn, HighestRecordedPriceColumn, CreatedByIDColumn, UpdatedByIDColumn, CreatedAtColumn, UpdatedAtColumn, SourceColumn, SearchVectorColumn, CategoryIDColumn}
		mutableColumns             = postgres.ColumnList{NameColumn, ImageColumn, DescriptionColumn, URLColumn, BrandColumn, CodeColumn, ColorColumn, ModelColumn, CategoryColumn, WeightColumn, LowestRecordedPriceColumn, HighestRecordedPriceColumn, CreatedByIDColumn, UpdatedByIDColumn, CreatedAtColumn, UpdatedAtColumn, SourceColumn, CategoryIDColumn}
	)

	return productTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                   IDColumn,
		Name:                 NameColumn,
		Image:                ImageColumn,
		Description:          DescriptionColumn,
		URL:                  URLColumn,
		Brand:                BrandColumn,
		Code:                 CodeColumn,
		Color:                ColorColumn,
		Model:                ModelColumn,
		Category:             CategoryColumn,
		Weight:               WeightColumn,
		LowestRecordedPrice:  LowestRecordedPriceColumn,
		HighestRecordedPrice: HighestRecordedPriceColumn,
		CreatedByID:          CreatedByIDColumn,
		UpdatedByID:          UpdatedByIDColumn,
		CreatedAt:            CreatedAtColumn,
		UpdatedAt:            UpdatedAtColumn,
		Source:               SourceColumn,
		SearchVector:         SearchVectorColumn,
		CategoryID:           CategoryIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AiPromptTemplate = newAiPromptTemplateTable("public", "ai_prompt_template", "")

type aiPromptTemplateTable struct {
	postgres.Table

	// Columns
	Type      postgres.ColumnString
	Prompt    postgres.ColumnString
	Variable  postgres.ColumnString
	MaxTokens postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AiPromptTemplateTable struct {
	aiPromptTemplateTable

	EXCLUDED aiPromptTemplateTable
}

// AS creates new AiPromptTemplateTable with assigned alias
func (a AiPromptTemplateTable) AS(alias string) *AiPromptTemplateTable {
	return newAiPromptTemplateTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AiPromptTemplateTable with assigned schema name
func (a AiPromptTemplateTable) FromSchema(schemaName string) *AiPromptTemplateTable {
	return newAiPromptTemplateTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AiPromptTemplateTable with assigned table prefix
func (a AiPromptTemplateTable) WithPrefix(prefix string) *AiPromptTemplateTable {
	return newAiPromptTemplateTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AiPromptTemplateTable with assigned table suffix
func (a AiPromptTemplateTable) WithSuffix(suffix string) *AiPromptTemplateTable {
	return newAiPromptTemplateTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAiPromptTemplateTable(schemaName, tableName, alias string) *AiPromptTemplateTable {
	return &AiPromptTemplateTable{
		aiPromptTemplateTable: newAiPromptTemplateTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newAiPromptTemplateTableImpl("", "excluded", ""),
	}
}

func newAiPromptTemplateTableImpl(schemaName, tableName, alias string) aiPromptTemplateTable {
	var (
		TypeColumn      = postgres.StringColumn("type")
		PromptColumn    = postgres.StringColumn("prompt")
		VariableColumn  = postgres.StringColumn("variable")
		MaxTokensColumn = postgres.IntegerColumn("max_tokens")
		allColumns      = postgres.ColumnList{TypeColumn, PromptColumn, VariableColumn, MaxTokensColumn}
		mutableColumns  = postgres.ColumnList{PromptColumn, VariableColumn, MaxTokensColumn}
	)

	return aiPromptTemplateTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Type:      TypeColumn,
		Prompt:    PromptColumn,
		Variable:  VariableColumn,
		MaxTokens: MaxTokensColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

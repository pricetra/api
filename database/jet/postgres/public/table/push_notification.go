//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PushNotification = newPushNotificationTable("public", "push_notification", "")

type pushNotificationTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	Request   postgres.ColumnString
	Response  postgres.ColumnString
	CreatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PushNotificationTable struct {
	pushNotificationTable

	EXCLUDED pushNotificationTable
}

// AS creates new PushNotificationTable with assigned alias
func (a PushNotificationTable) AS(alias string) *PushNotificationTable {
	return newPushNotificationTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PushNotificationTable with assigned schema name
func (a PushNotificationTable) FromSchema(schemaName string) *PushNotificationTable {
	return newPushNotificationTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PushNotificationTable with assigned table prefix
func (a PushNotificationTable) WithPrefix(prefix string) *PushNotificationTable {
	return newPushNotificationTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PushNotificationTable with assigned table suffix
func (a PushNotificationTable) WithSuffix(suffix string) *PushNotificationTable {
	return newPushNotificationTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPushNotificationTable(schemaName, tableName, alias string) *PushNotificationTable {
	return &PushNotificationTable{
		pushNotificationTable: newPushNotificationTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newPushNotificationTableImpl("", "excluded", ""),
	}
}

func newPushNotificationTableImpl(schemaName, tableName, alias string) pushNotificationTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		RequestColumn   = postgres.StringColumn("request")
		ResponseColumn  = postgres.StringColumn("response")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		allColumns      = postgres.ColumnList{IDColumn, RequestColumn, ResponseColumn, CreatedAtColumn}
		mutableColumns  = postgres.ColumnList{RequestColumn, ResponseColumn, CreatedAtColumn}
	)

	return pushNotificationTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		Request:   RequestColumn,
		Response:  ResponseColumn,
		CreatedAt: CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

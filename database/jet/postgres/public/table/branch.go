//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Branch = newBranchTable("public", "branch", "")

type branchTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	Name         postgres.ColumnString
	AddressID    postgres.ColumnInteger
	StoreID      postgres.ColumnInteger
	CreatedByID  postgres.ColumnInteger
	UpdatedByID  postgres.ColumnInteger
	CreatedAt    postgres.ColumnTimestampz
	UpdatedAt    postgres.ColumnTimestampz
	SearchVector postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type BranchTable struct {
	branchTable

	EXCLUDED branchTable
}

// AS creates new BranchTable with assigned alias
func (a BranchTable) AS(alias string) *BranchTable {
	return newBranchTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BranchTable with assigned schema name
func (a BranchTable) FromSchema(schemaName string) *BranchTable {
	return newBranchTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BranchTable with assigned table prefix
func (a BranchTable) WithPrefix(prefix string) *BranchTable {
	return newBranchTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BranchTable with assigned table suffix
func (a BranchTable) WithSuffix(suffix string) *BranchTable {
	return newBranchTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBranchTable(schemaName, tableName, alias string) *BranchTable {
	return &BranchTable{
		branchTable: newBranchTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newBranchTableImpl("", "excluded", ""),
	}
}

func newBranchTableImpl(schemaName, tableName, alias string) branchTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		NameColumn         = postgres.StringColumn("name")
		AddressIDColumn    = postgres.IntegerColumn("address_id")
		StoreIDColumn      = postgres.IntegerColumn("store_id")
		CreatedByIDColumn  = postgres.IntegerColumn("created_by_id")
		UpdatedByIDColumn  = postgres.IntegerColumn("updated_by_id")
		CreatedAtColumn    = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampzColumn("updated_at")
		SearchVectorColumn = postgres.StringColumn("search_vector")
		allColumns         = postgres.ColumnList{IDColumn, NameColumn, AddressIDColumn, StoreIDColumn, CreatedByIDColumn, UpdatedByIDColumn, CreatedAtColumn, UpdatedAtColumn, SearchVectorColumn}
		mutableColumns     = postgres.ColumnList{NameColumn, AddressIDColumn, StoreIDColumn, CreatedByIDColumn, UpdatedByIDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return branchTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Name:         NameColumn,
		AddressID:    AddressIDColumn,
		StoreID:      StoreIDColumn,
		CreatedByID:  CreatedByIDColumn,
		UpdatedByID:  UpdatedByIDColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,
		SearchVector: SearchVectorColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

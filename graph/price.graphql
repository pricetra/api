extend type Query {
  priceChangeHistory(
    productId: ID!
    stockId: ID!
    paginator: PaginatorInput!
    filters: PriceHistoryFilter
  ): PaginatedPriceHistory! @isAuthenticated
}

extend type Mutation {
  createPrice(input: CreatePrice!): Price! @isAuthenticated
}

input PriceHistoryFilter {
  orderBy: OrderByType = DESC
}

type PaginatedPriceHistory {
  prices: [Price!]!
  paginator: Paginator!
}

type Price {
  id: ID! @goTag(key: "sql", value: "primary_key")
  amount: Float!
  currencyCode: String!
  productId: ID!
  product: Product
  stockId: ID!
  stock: Stock
  storeId: ID!
  store: Store
  branchId: ID!
  branch: Branch
  sale: Boolean!
  originalPrice: Float
  condition: String
  unitType: String!
  imageId: String
  expiresAt: Time
  createdAt: Time!
  updatedAt: Time!
  createdById: ID
  createdBy: CreatedByUser
  updatedById: ID
  updatedBy: UpdatedByUser
}

input CreatePrice {
  productId: ID!
  branchId: ID!
  amount: Float! @goTag(key: "validate", value: "gt=0")
  currencyCode: String
  sale: Boolean!
  originalPrice: Float
  condition: String
  unitType: String!
  imageId: String
  expiresAt: Time
  imageFile: Upload
}

input CreateAddress {
  latitude: Float! @goTag(key: "validate", value: "required,latitude")
  longitude: Float! @goTag(key: "validate", value: "required,longitude")
  mapsLink: String! @goTag(key: "validate", value: "required,http_url")
  fullAddress: String! @goTag(key: "validate", value: "required,contains")
  street: String
  city: String! @goTag(key: "validate", value: "required")
  administrativeDivision: String! @goTag(key: "validate", value: "required")
  countryCode: String!
    @goTag(key: "validate", value: "required,iso3166_1_alpha2")
  zipCode: Int! @goTag(key: "validate", value: "required")
}

type Address {
  id: ID! @goTag(key: "sql", value: "primary_key")
  createdAt: Time!
  updatedAt: Time!
  latitude: Float!
  longitude: Float!
  distance: Float @goTag(key: "alias", value: "address.distance")
  mapsLink: String!
  fullAddress: String!
  street: String
  city: String!
  administrativeDivision: String!
  zipCode: String!
  countryCode: String!
  country: String @goTag(key: "alias", value: "country.name")

  createdById: ID
  createdBy: CreatedByUser
  updatedById: ID
  updatedBy: UpdatedByUser
}

input LocationInput {
  latitude: Float! @goTag(key: "validate", value: "required,latitude")
  longitude: Float! @goTag(key: "validate", value: "required,longitude")
  radiusMeters: Int
}

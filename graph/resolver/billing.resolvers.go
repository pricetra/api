package gresolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"

	"github.com/pricetra/api/graph"
	"github.com/pricetra/api/graph/gmodel"
)

// MyProductBillingData is the resolver for the myProductBillingData field.
func (r *queryResolver) MyProductBillingData(ctx context.Context, paginator gmodel.PaginatorInput) (*gmodel.PaginatedProductBilling, error) {
	user := r.Service.GetAuthUserFromContext(ctx)
	res, err := r.Service.FindProductBillingByUser(ctx, paginator, user)
	if err != nil {
		return nil, err
	}
	return &res, nil
}

// ProductBillingDataByUserID is the resolver for the productBillingDataByUserId field.
func (r *queryResolver) ProductBillingDataByUserID(ctx context.Context, userID int64, paginator gmodel.PaginatorInput) (*gmodel.PaginatedProductBilling, error) {
	user, err := r.Service.FindUserById(ctx, userID)
	if err != nil {
		return nil, fmt.Errorf("could not find user with id")
	}
	res, err := r.Service.FindProductBillingByUser(ctx, paginator, user)
	if err != nil {
		return nil, err
	}
	return &res, nil
}

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }

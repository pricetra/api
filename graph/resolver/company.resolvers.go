package gresolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"

	"github.com/cloudinary/cloudinary-go/v2/api/uploader"
	"github.com/pricetra/api/graph"
	"github.com/pricetra/api/graph/gmodel"
)

// CreateCompany is the resolver for the createCompany field.
func (r *mutationResolver) CreateCompany(ctx context.Context, input gmodel.CreateCompany) (*gmodel.Company, error) {
	user := r.Service.GetAuthUserFromContext(ctx)
	company, err := r.Service.CreateCompany(ctx, user, input)
	if err != nil {
		return nil, err
	}

	// upload file
	if input.LogoFile != nil {
		_, err := r.Service.GraphImageUpload(ctx, *input.LogoFile, uploader.UploadParams{
			PublicID: input.Logo,
			Tags:     []string{"COMPANY_LOGO"},
		})
		if err != nil {
			return nil, fmt.Errorf("could not upload logo to CDN")
		}
	}
	return &company, nil
}

// AllCompanies is the resolver for the allCompanies field.
func (r *queryResolver) AllCompanies(ctx context.Context) ([]*gmodel.Company, error) {
	companies, err := r.Service.GetAllCompanies(ctx)
	if err != nil {
		return nil, err
	}

	result := make([]*gmodel.Company, len(companies))
	for i := range companies {
		result[i] = &companies[i]
	}
	return result, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

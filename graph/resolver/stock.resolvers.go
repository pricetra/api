package gresolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"

	"github.com/pricetra/api/graph/gmodel"
)

// Stock is the resolver for the stock field.
func (r *queryResolver) Stock(ctx context.Context, stockID int64) (*gmodel.Stock, error) {
	stock, err := r.Service.FindStockById(ctx, stockID)
	if err != nil {
		return nil, fmt.Errorf("could not fetch stock with the provided stockId")
	}
	return &stock, nil
}

// GetProductStocks is the resolver for the getProductStocks field.
func (r *queryResolver) GetProductStocks(ctx context.Context, paginator gmodel.PaginatorInput, productID int64, location *gmodel.LocationInput) (*gmodel.PaginatedStocks, error) {
	stocks, err := r.Service.GetStocksForProduct(ctx, productID, location)
	if err != nil {
		return nil, err
	}
	res := make([]*gmodel.Stock, len(stocks))
	for i := range stocks {
		res[i] = &stocks[i]
	}
	return res, nil
}

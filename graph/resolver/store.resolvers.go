package gresolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"

	"github.com/cloudinary/cloudinary-go/v2/api/uploader"
	"github.com/pricetra/api/graph/gmodel"
)

// CreateStore is the resolver for the createStore field.
func (r *mutationResolver) CreateStore(ctx context.Context, input gmodel.CreateStore) (*gmodel.Store, error) {
	user := r.Service.GetAuthUserFromContext(ctx)
	store, err := r.Service.CreateStore(ctx, user, input)
	if err != nil {
		return nil, err
	}

	// upload file
	if input.LogoFile != nil {
		_, err := r.Service.GraphImageUpload(ctx, *input.LogoFile, uploader.UploadParams{
			PublicID: input.Logo,
			Tags:     []string{"COMPANY_LOGO"},
		})
		if err != nil {
			return nil, fmt.Errorf("could not upload logo to CDN")
		}
	}
	return &store, nil
}

// AllStores is the resolver for the allStores field.
func (r *queryResolver) AllStores(ctx context.Context) ([]*gmodel.Store, error) {
	stores, err := r.Service.GetAllStores(ctx)
	if err != nil {
		return nil, err
	}

	result := make([]*gmodel.Store, len(stores))
	for i := range stores {
		result[i] = &stores[i]
	}
	return result, nil
}

// FindStore is the resolver for the findStore field.
func (r *queryResolver) FindStore(ctx context.Context, id int64) (*gmodel.Store, error) {
	store, err := r.Service.FindStore(ctx, id)
	if err != nil {
		return nil, err
	}
	return &store, nil
}

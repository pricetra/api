package gresolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"

	"github.com/go-jet/jet/v2/postgres"
	"github.com/pricetra/api/database/jet/postgres/public/model"
	"github.com/pricetra/api/database/jet/postgres/public/table"
	"github.com/pricetra/api/graph"
	"github.com/pricetra/api/graph/gmodel"
	"golang.org/x/mod/semver"
)

// CheckAppVersion is the resolver for the checkAppVersion field.
func (r *queryResolver) CheckAppVersion(ctx context.Context, platform gmodel.AuthDeviceType, version string) (bool, error) {
	cur_version := "v" + version
	if !semver.IsValid(cur_version) {
		return false, fmt.Errorf("invalid version format")
	}

	qb := table.AppVersionRequirement.
		SELECT(
			table.AppVersionRequirement.Platform,
			table.AppVersionRequirement.MinVersion,
		).
		WHERE(table.AppVersionRequirement.Platform.EQ(
			postgres.NewEnumValue(platform.String()),
		)).
		LIMIT(1)
	var ver model.AppVersionRequirement
	if err := qb.QueryContext(ctx, r.Service.DB, &ver); err != nil {
		return false, fmt.Errorf("could not get versioning information")
	}
	return semver.Compare(cur_version, "v"+ver.MinVersion) >= 0, nil
}

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }

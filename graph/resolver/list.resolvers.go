package gresolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"

	"github.com/pricetra/api/graph/gmodel"
)

// CreateList is the resolver for the createList field.
func (r *mutationResolver) CreateList(ctx context.Context, name string) (*gmodel.List, error) {
	user := r.Service.GetAuthUserFromContext(ctx)
	list, err := r.Service.CreateList(ctx, user.ID, name, gmodel.ListTypePersonal)
	if err != nil {
		return nil, err
	}
	return &list, nil
}

// DeleteList is the resolver for the deleteList field.
func (r *mutationResolver) DeleteList(ctx context.Context, listID int64) (*gmodel.List, error) {
	user := r.Service.GetAuthUserFromContext(ctx)
	list, err := r.Service.DeleteList(ctx, user, listID)
	if err != nil {
		return nil, err
	}
	return &list, nil
}

// AddToList is the resolver for the addToList field.
func (r *mutationResolver) AddToList(ctx context.Context, listID int64, productID int64, stockID *int64) (*gmodel.ProductList, error) {
	user := r.Service.GetAuthUserFromContext(ctx)
	product_list, err := r.Service.AddProductToList(ctx, user, listID, productID, stockID)
	if err != nil {
		return nil, err
	}
	return &product_list, nil
}

// RemoveFromList is the resolver for the removeFromList field.
func (r *mutationResolver) RemoveFromList(ctx context.Context, listID int64, productListID int64) (*gmodel.ProductList, error) {
	user := r.Service.GetAuthUserFromContext(ctx)
	product_list, err := r.Service.RemoveProductFromList(ctx, user, listID, productListID)
	if err != nil {
		return nil, err
	}
	return &product_list, nil
}

// AddBranchToList is the resolver for the addBranchToList field.
func (r *mutationResolver) AddBranchToList(ctx context.Context, listID int64, branchID int64) (*gmodel.BranchList, error) {
	user := r.Service.GetAuthUserFromContext(ctx)
	branch_list, err := r.Service.AddBranchToList(ctx, user, listID, branchID)
	if err != nil {
		return nil, err
	}
	return &branch_list, nil
}

// RemoveBranchFromList is the resolver for the removeBranchFromList field.
func (r *mutationResolver) RemoveBranchFromList(ctx context.Context, listID int64, branchListID int64) (*gmodel.BranchList, error) {
	user := r.Service.GetAuthUserFromContext(ctx)
	branch_list, err := r.Service.RemoveBranchFromList(ctx, user, listID, branchListID)
	if err != nil {
		return nil, err
	}
	return &branch_list, nil
}

// GetAllLists is the resolver for the getAllLists field.
func (r *queryResolver) GetAllLists(ctx context.Context, listType *gmodel.ListType) ([]*gmodel.List, error) {
	user := r.Service.GetAuthUserFromContext(ctx)
	lists, err := r.Service.FindAllListsByUserId(ctx, user, listType)
	if err != nil {
		return nil, err
	}

	res := make([]*gmodel.List, len(lists))
	for i := range lists {
		res[i] = &lists[i]
	}
	return res, nil
}

// GetFavoriteBranchesWithPrices is the resolver for the getFavoriteBranchesWithPrices field.
func (r *queryResolver) GetFavoriteBranchesWithPrices(ctx context.Context, productID int64) ([]*gmodel.BranchListWithPrices, error) {
	user := r.Service.GetAuthUserFromContext(ctx)
	data, err := r.Service.AllFavoriteBranchProductPrices(ctx, user, productID)
	if err != nil {
		return nil, err
	}
	res := make([]*gmodel.BranchListWithPrices, len(data))
	for i := range data {
		res[i] = &data[i]
	}
	return res, nil
}

extend type Query {
  barcodeScan(barcode: String!): Product! @isAuthenticated
  allProducts(
    paginator: PaginatorInput!
    search: ProductSearch
  ): PaginatedProducts! @isAuthenticated
  allBrands: [Brand!]! @isAuthenticated
}

extend type Mutation {
  createProduct(input: CreateProduct!): Product! @isAuthenticated
  updateProduct(id: ID!, input: UpdateProduct!): Product! @isAuthenticated
}

type PaginatedProducts {
  products: [Product!]!
  paginator: Paginator!
}

type Brand {
  brand: String! @goTag(key: "alias", value: "product.brand")
  products: Int64!
}

type Product {
  id: ID! @goTag(key: "sql", value: "primary_key")
  name: String!
  image: String!
  description: String!
  url: String
  brand: String!
  code: String!
  color: String
  model: String
  categoryId: ID!
  category: Category
  weight: String
  lowestRecordedPrice: Float
  highestRecordedPrice: Float
  createdAt: Time!
  updatedAt: Time!
  createdById: ID
  createdBy: CreatedByUser
  updatedById: ID
  updatedBy: UpdatedByUser
}

input CreateProduct {
  name: String! @goTag(key: "validate", value: "required")
  image: String
  description: String!
  url: String @goTag(key: "validate", value: "omitempty,http_url")
  brand: String!
  code: String! @goTag(key: "validate", value: "required")
  color: String
  model: String
  categoryId: ID! @goTag(key: "validate", value: "required")
  weight: String
  lowestRecordedPrice: Float
  highestRecordedPrice: Float
  imageFile: Upload
}

input UpdateProduct {
  name: String
  image: String
  description: String
  url: String @goTag(key: "validate", value: "omitempty,http_url")
  brand: String
  code: String
  color: String
  model: String
  categoryId: ID
  weight: String
  lowestRecordedPrice: Float
  highestRecordedPrice: Float
  imageFile: Upload
}

input ProductSearch {
  query: String
}

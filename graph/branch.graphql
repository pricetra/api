type Branch {
  id: ID! @goTag(key: "sql", value: "primary_key")
  name: String!
  addressId: ID!
  address: Address!
  storeId: ID!
  store: Store

  createdById: ID
  createdBy: CreatedByUser
  updatedById: ID
  updatedBy: UpdatedByUser
}

input CreateBranch {
  name: String! @goTag(key: "validate", value: "required")
  address: CreateAddress!
  storeId: ID! @goTag(key: "validate", value: "required")
}

extend type Query {
  allBranches(storeId: ID!): [Branch!]! @isAuthenticated
  findBranch(storeId: ID!, id: ID!): Branch! @isAuthenticated
  findBranchesByDistance(lat: Float!, lon: Float!, radiusMeters: Int!): [Branch!]! @isAuthenticated
}

extend type Mutation {
  createBranchWithFullAddress(storeId: ID!, fullAddress: String!): Branch! @isAuthenticated(role: "ADMIN")
  createBranch(input: CreateBranch!): Branch! @isAuthenticated(role: "ADMIN")
}

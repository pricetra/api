type Branch {
  id: ID! @goTag(key: "sql", value: "primary_key")
  name: String!
  addressId: ID!
  address: Address!
  storeId: ID!
  store: Store
  products: [ProductSimple!]
}

type BranchFlat {
  id: ID! @goTag(key: "sql", value: "primary_key")
  name: String!
  addressId: ID!
  address: Address!
  storeId: ID!
}

type PaginatedBranches {
  branches: [Branch!]!
  paginator: Paginator!
}

input CreateBranch {
  name: String! @goTag(key: "validate", value: "required")
  address: CreateAddress!
  storeId: ID! @goTag(key: "validate", value: "required")
}

extend type Query {
  allBranches(
    storeId: ID!
    paginator: PaginatorInput!
    search: String
    location: LocationInput
  ): PaginatedBranches!
  findBranch(storeId: ID!, id: ID!): Branch!
  findBranchesByDistance(
    lat: Float!
    lon: Float!
    radiusMeters: Int!
  ): [Branch!]!
  branchesWithProducts(
    paginator: PaginatorInput!
    productLimit: Int!
    filters: ProductSearch
  ): PaginatedBranches!
}

extend type Mutation {
  createBranchWithFullAddress(storeId: ID!, fullAddress: String!): Branch!
    @isAuthenticated(role: "ADMIN")
  createBranch(input: CreateBranch!): Branch! @isAuthenticated(role: "ADMIN")
}